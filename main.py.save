from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.image import Image
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.filechooser import FileChooserIconView
from kivy.graphics.texture import Texture
from kivy.clock import Clock
from kivy.core.image import Image as CoreImage
from kivy.uix.scrollview import ScrollView
from kivy.uix.gridlayout import GridLayout

from io import BytesIO
import cv2
import numpy as np
from threading import Thread

from utils.detector import detect_license_plate
from utils.file_logger import log_entry, read_log_entries

class LicensePlateApp(BoxLayout):
    def __init__(self, **kwargs):
        super().__init__(orientation='vertical', **kwargs)

        self.image = Image(allow_stretch=True)
        self.label = Label(text="No license plate detected yet.")
        self.choose_btn = Button(text="Choose Image")
        self.camera_btn = Button(text="Use Camera")
        self.capture_btn = Button(text="Capture", disabled=True)
        self.logs_btn = Button(text="Show Logs")

        self.choose_btn.bind(on_press=self.open_filechooser)
        self.camera_btn.bind(on_press=self.start_camera)
        self.capture_btn.bind(on_press=self.capture_frame)
        self.logs_btn.bind(on_press=self.show_logs)

        self.add_widget(self.image)
        self.add_widget(self.label)
        self.add_widget(self.choose_btn)
        self.add_widget(self.camera_btn)
        self.add_widget(self.capture_btn)
        self.add_widget(self.logs_btn)

        self.capture = None
        self.frame = None

    def open_filechooser(self, instance):
        self.chooser = FileChooserIconView()
        self.chooser.bind(on_submit=self.load_image)
        self.clear_widgets()
        self.add_widget(self.chooser)

    def load_image(self, chooser, selection, touch):
        if selection:
            image_path = selection[0]

            self.clear_widgets()
            self.add_widget(self.image)
            self.add_widget(self.label)
            self.add_widget(self.choose_btn)
            self.add_widget(self.camera_btn)
            self.add_widget(self.capture_btn)
            self.add_widget(self.logs_btn)

            Clock.schedule_once(lambda dt: self.display_and_detect(image_path), 0)

        def update_camera_feed(self, dt):
        if not self.capture or not self.capture.isOpened():
            return

        ret, frame = self.capture.read()
        if not ret:
            return

        self.frame = frame
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        flipped = cv2.flip(frame_rgb, 0)
        texture = Texture.create(size=(flipped.shape[1], flipped.shape[0]), colorfmt='rgb')
        texture.blit_buffer(flipped.tobytes(), colorfmt='rgb', bufferfmt='ubyte')
        self.image.texture = texture

    def capture_frame(self, instance):
        if self.frame is None:
            self.label_update("No frame to capture.")
            return

        image_path = "captured_frame.jpg"
        cv2.imwrite(image_path, self.frame)
        Clock.schedule_once(lambda dt: self.display_and_detect(image_path), 0)

    def display_and_detect(self, image_path):
        def process_image():
            try:
                plate_number, annotated_img, vehicle_type = detect_license_plate(image_path)
                log_entry(plate_number)

                if annotated_img is None:
                    raise ValueError("annotated_img is None")

                display_img = cv2.resize(annotated_img, (640, 480))
                display_img = cv2.cvtColor(display_img, cv2.COLOR_BGR2RGB)

                success, buffer = cv2.imencode('.png', display_img)
                if not success:
                    raise ValueError("Failed to encode image to PNG")

                data = BytesIO(buffer.tobytes())
                core_img = CoreImage(data, ext='png')

                def update_ui(dt):
                    self.clear_widgets()
                    self.image.texture = core_img.texture
                    self.image.size_hint = (1, None)
                    self.image.height = 480
                    self.label.text = f"[{vehicle_type}] Plate: {plate_number}"
                    self.add_widget(self.image)
                    self.add_widget(self.label)
                    self.add_widget(self.choose_btn)
                    self.add_widget(self.camera_btn)
                    self.add_widget(self.capture_btn)
                    self.add_widget(self.logs_btn)

                Clock.schedule_once(update_ui, 0)

            except Exception as e:
                print(f"[ERROR] UI update failed: {e}")
                Clock.schedule_once(lambda dt: self.label_update("Detection failed."), 0)

        Thread(target=process_image).start()

    def show_logs(self, instance):
        self.clear_widgets()
        log_entries = read_log_entries()

        if not log_entries:
            self.label.text = "No valid detections logged yet."
            self.add_widget(self.label)
        else:
            scroll = ScrollView()
            layout = GridLayout(cols=1, spacing=5, size_hint_y=None)
            layout.bind(minimum_height=layout.setter('height'))

            for entry in reversed(log_entries):
                plate, timestamp = entry
                label = Label(text=f"{timestamp} âž¤ {plate}", size_hint_y=None, height=40)
                layout.add_widget(label)

            scroll.add_widget(layout)
            self.add_widget(scroll)

        # Restore buttons
        self.add_widget(self.choose_btn)
        self.add_widget(self.camera_btn)
        self.add_widget(self.capture_btn)
        self.add_widget(self.logs_btn)

    def label_update(self, msg):
        self.label.text = msg


class LicenseApp(App):
    def build(self):
        return LicensePlateApp()


if __name__ == '__main__':
    LicenseApp().run()
